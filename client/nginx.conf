# # Nginx의 worker 프로세스 수를 1로 설정합니다. 
# # worker_processes 값은 서버에서 실행되는 worker 프로세스의 수를 지정합니다. 
# # 1로 설정하면 1개의 worker 프로세스만 실행됩니다.
# worker_processes 1;

# # "events" 블록은 Nginx의 이벤트 기반 모델을 설정합니다. 
# # 서버가 얼마나 많은 연결을 동시에 처리할 수 있는지, 
# # 또는 이벤트 처리와 관련된 여러 설정들을 정의합니다.
# events {
#     # "worker_connections"는 각 worker 프로세스가 동시에 처리할 수 있는 최대 연결 수를 지정합니다.
#     # 즉, 각 worker 프로세스가 동시에 몇 개의 연결을 처리할 수 있는지를 설정합니다.
#     worker_connections 1024;
# }

# # "http" 블록은 HTTP 서버 관련 설정을 포함하는 가장 중요한 부분입니다.
# # 모든 HTTP 관련 설정을 여기서 처리합니다.
# http { 
#     # MIME 타입을 정의하는 파일을 포함합니다. 
#     # 이 파일은 웹 서버에서 다양한 파일 확장자에 대한 MIME 타입을 지정하는데 사용됩니다.
#     include mime.types;

#     # 기본 MIME 타입을 "application/json"으로 설정합니다.
#     # 이는 지정되지 않은 경우의 기본 MIME 타입을 정의합니다. 
#     default_type application/json;

#     # "log_format"은 요청을 로그로 남길 때 사용하는 포맷을 정의합니다.
#     # 이 포맷에 따라 로그 파일에 어떤 정보가 기록될지를 설정합니다.
#     log_format main '$remote_addr - $remote_user [$time_local] "$request" '
#                     '$status $body_bytes_sent "$http_referer" '
#                     '"$http_user_agent" "$http_x_forwarded_for" '
#                     'to "$upstream_addr"';

#     # "access_log"는 접근 로그의 경로와 포맷을 설정합니다.
#     # 요청에 대한 로그 정보를 기록할 파일을 지정합니다. 
#     # "main"은 위에서 정의한 log_format을 사용합니다.
#     access_log /var/log/nginx/access.log main;

#     # "error_log"는 오류 로그를 설정합니다.
#     # Nginx가 처리하는 동안 발생하는 오류에 대한 로그를 기록할 파일을 지정합니다.
#     # "debug" 레벨의 로그를 기록하여, 디버깅 정보를 좀 더 자세히 남기도록 합니다.
#     error_log /var/log/nginx/error.log debug;

#     # "gzip_static"는 정적 파일에 대해 Gzip 압축된 버전을 사용할지를 설정합니다.
#     # "on"으로 설정하면, Gzip 압축된 파일을 찾아서 제공하도록 설정됩니다.
#     gzip_static on;

#     # "gzip_vary"는 "Accept-Encoding" 헤더에 따른 압축 설정을 적용합니다.
#     # 클라이언트가 Gzip을 지원하는 경우에만 압축된 파일을 제공하도록 합니다.
#     gzip_vary on;

#     # 연결을 60초 동안 유지
#     keepalive_timeout 60;

#     # conf.d 디렉토리 내의 모든 .conf 파일을 포함
#     include /etc/nginx/conf.d/*.conf;
#  }


# # # server {
# # #     listen 80;
# # #     server_name localhost;

# # #     root   /usr/share/nginx/html;
# # #     index  index.html;

# # #     location / {
# # #         try_files $uri /index.html;
# # #     }
    
# # #     location /api {
# # #         # API 서버로 요청을 프록시
# # #         proxy_pass http://api-container:8080;

# # #         # 요청 헤더 설정
# # #         proxy_http_version 1.1;                    # HTTP/1.1 사용 (Keep-Alive가 기본값, 지속적 연결 지원, 파이프라이닝 가능)
# # #         proxy_set_header Connection "keep-alive";  # Keep-Alive 활성화 (여러 요청에 대해 단일 TCP 연결 재사용)
# # #         proxy_set_header Host $host;                # 원본 호스트 정보 ex) localhost:80ㅁ
# # #         proxy_set_header X-Real-IP $remote_addr;    # 실제 클라이언트 IP ex) 127.0.0.1
# # #         proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;  # 프록시 서버를 거친 클라이언트의 IP 목록
# # #     }
# # # }

worker_processes 1;

events {
    worker_connections 1024;
}

http {
    include       mime.types;
    default_type  application/json;

    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for" "$request_time" '
                    '"$upstream_response_time" "$upstream_addr"';
  
    access_log /var/log/nginx/access.log main;
    error_log /var/log/nginx/error.log;

    keepalive_timeout 60;

    gzip_static on;
    
    gzip_vary on;

    server {
        listen 80;
        
        server_name localhost;

        root /usr/share/nginx/html;
        
        index index.html;

        location / {
            try_files $uri /index.html;
        }
				
				# localhost:80/api/~ 패턴으로 요청하면
				# 프록시 서버가
				# localhost:8080/api/~ 로 요청을 재전달한다.
        location /api/ {
            proxy_pass http://localhost:8080;
            proxy_set_header Host $host;
        }
    }
}