# # # Nginx의 worker 프로세스 수를 1로 설정합니다. 
# # # worker_processes 값은 서버에서 실행되는 worker 프로세스의 수를 지정합니다. 
# # # 1로 설정하면 1개의 worker 프로세스만 실행됩니다.
# # worker_processes 1;

# # # "events" 블록은 Nginx의 이벤트 기반 모델을 설정합니다. 
# # # 서버가 얼마나 많은 연결을 동시에 처리할 수 있는지, 
# # # 또는 이벤트 처리와 관련된 여러 설정들을 정의합니다.
# # events {
# #     # "worker_connections"는 각 worker 프로세스가 동시에 처리할 수 있는 최대 연결 수를 지정합니다.
# #     # 즉, 각 worker 프로세스가 동시에 몇 개의 연결을 처리할 수 있는지를 설정합니다.
# #     worker_connections 1024;
# # }

# # # "http" 블록은 HTTP 서버 관련 설정을 포함하는 가장 중요한 부분입니다.
# # # 모든 HTTP 관련 설정을 여기서 처리합니다.
# # http { 
# #     # MIME 타입을 정의하는 파일을 포함합니다. 
# #     # 이 파일은 웹 서버에서 다양한 파일 확장자에 대한 MIME 타입을 지정하는데 사용됩니다.
# #     include mime.types;
    
# #     # 기본 MIME 타입을 "application/json"으로 설정합니다.
# #     # 이는 지정되지 않은 경우의 기본 MIME 타입을 정의합니다. 
# #     default_type application/json;

# #     # "log_format"은 요청을 로그로 남길 때 사용하는 포맷을 정의합니다.
# #     # 이 포맷에 따라 로그 파일에 어떤 정보가 기록될지를 설정합니다.
# #     log_format main '$remote_addr - $remote_user [$time_local] "$request" '
# #                     '$status $body_bytes_sent "$http_referer" '
# #                     '"$http_user_agent" "$http_x_forwarded_for" '
# #                     'to "$upstream_addr"';

# #     # "access_log"는 접근 로그의 경로와 포맷을 설정합니다.
# #     # 요청에 대한 로그 정보를 기록할 파일을 지정합니다. 
# #     # "main"은 위에서 정의한 log_format을 사용합니다.
# #     access_log /var/log/nginx/access.log main;

# #     # "error_log"는 오류 로그를 설정합니다.
# #     # Nginx가 처리하는 동안 발생하는 오류에 대한 로그를 기록할 파일을 지정합니다.
# #     # "debug" 레벨의 로그를 기록하여, 디버깅 정보를 좀 더 자세히 남기도록 합니다.
# #     error_log /var/log/nginx/error.log debug;

# #     # "gzip_static"는 정적 파일에 대해 Gzip 압축된 버전을 사용할지를 설정합니다.
# #     # "on"으로 설정하면, Gzip 압축된 파일을 찾아서 제공하도록 설정됩니다.
# #     gzip_static on;

# #     # "gzip_vary"는 "Accept-Encoding" 헤더에 따른 압축 설정을 적용합니다.
# #     # 클라이언트가 Gzip을 지원하는 경우에만 압축된 파일을 제공하도록 합니다.
# #     gzip_vary on;
    
# # HTTPS 서버 설정 (SSL을 사용하는 서버 설정)
# server {
#     # 443 포트에서 SSL을 사용하여 서버를 리슨합니다. 
#     # SSL을 사용하려면 반드시 이 포트에서 대기해야 합니다.
#     listen 443 ssl;
    
#     # HTTP/2 프로토콜을 활성화합니다. 
#     # HTTP/2는 성능 개선 및 다양한 기능을 제공합니다.
#     http2 on;

#     # 서버의 도메인 이름을 지정합니다. 
#     # 클라이언트가 요청할 때 이 도메인으로 요청이 들어옵니다.
#     server_name 43.203.180.17.sslip.io;

#     # SSL 인증서와 개인 키를 설정합니다.
#     # "fullchain.pem"은 서버 인증서와 체인 인증서를 포함한 파일이고, 
#     # "privkey.pem"은 서버의 개인 키 파일입니다. 
#     ssl_certificate /etc/letsencrypt/live/43.203.180.17.sslip.io/fullchain.pem;
#     ssl_certificate_key /etc/letsencrypt/live/43.203.180.17.sslip.io/privkey.pem;

#     # SSL 보안 설정
#     # SSL 프로토콜 버전을 설정합니다. TLSv1.2와 TLSv1.3을 사용하도록 설정하여, 보안이 강화됩니다.
#     ssl_protocols TLSv1.2 TLSv1.3;
    
#     # SSL 암호화 방식 설정
#     # 다양한 암호화 방식 중에서 안전한 것들을 선택하여, SSL 연결의 보안을 강화합니다.
#     ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384;
    
#     # 서버에서 제안하는 암호화 방식을 우선적으로 사용하도록 설정합니다.
#     ssl_prefer_server_ciphers on;

#     # 웹 서버의 기본 루트 디렉토리 설정 (정적 파일 위치)
#     root /usr/share/nginx/html;
    
#     # 기본 페이지 파일을 "index.html"로 설정합니다.
#     index index.html;

#     # 기본 루트 경로("/")에 대한 요청 처리
#     location / {
#         # 요청한 파일이 있으면 해당 파일을 반환하고, 
#         # 없으면 "index.html"을 반환하도록 합니다.
#         try_files $uri /index.html;
#     }

#     # "/api/" 경로로 들어오는 요청은 API 서버로 프록시합니다.
#     # "proxy_pass"는 요청을 다른 서버로 전달하는 역할을 합니다. 여기서는 Docker 컨테이너로 요청을 전달합니다.
#     location /api/ {
#         # api-container라는 컨테이너의 8080 포트로 요청을 전달합니다.
#         proxy_pass http://api-container:8080;
        
#         # 원본 요청의 Host 헤더를 전달합니다. 
#         # 원본 요청의 도메인 정보가 필요할 수 있기 때문에 이를 그대로 전달합니다.
#         proxy_set_header Host $host;
#     }
# }

# # HTTP 요청을 HTTPS로 리다이렉트하는 설정
# server {
#     # HTTP 요청은 80 포트에서 받습니다. 
#     # 이 포트는 SSL을 사용하지 않는 일반 HTTP 요청을 처리합니다.
#     listen 80;
    
#     # 서버 도메인 설정
#     server_name 43.203.180.17.sslip.io;

#     # 모든 요청을 HTTPS로 리다이렉트합니다.
#     # 301 리다이렉트를 사용하여 클라이언트가 해당 URL을 영구적으로 사용하도록 유도합니다.
#     location / {
#         return 301 https://$host$request_uri;
#     }
# }

# # }


# # server {
# #     listen 80;
# #     server_name localhost;

# #     root   /usr/share/nginx/html;
# #     index  index.html;

# #     location / {
# #         try_files $uri /index.html;
# #     }
    
# #     location /api {
# #         # API 서버로 요청을 프록시
# #         proxy_pass http://api-container:8080;

# #         # 요청 헤더 설정
# #         proxy_http_version 1.1;                    # HTTP/1.1 사용 (Keep-Alive가 기본값, 지속적 연결 지원, 파이프라이닝 가능)
# #         proxy_set_header Connection "keep-alive";  # Keep-Alive 활성화 (여러 요청에 대해 단일 TCP 연결 재사용)
# #         proxy_set_header Host $host;                # 원본 호스트 정보 ex) localhost:80ㅁ
# #         proxy_set_header X-Real-IP $remote_addr;    # 실제 클라이언트 IP ex) 127.0.0.1
# #         proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;  # 프록시 서버를 거친 클라이언트의 IP 목록
# #     }
# # }